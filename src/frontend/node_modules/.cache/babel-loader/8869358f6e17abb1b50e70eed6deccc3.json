{"ast":null,"code":"import React from \"react\";\nimport objectAssign from \"object-assign\";\nconst Iframe = ({\n  url,\n  allowFullScreen,\n  position,\n  display,\n  height,\n  width,\n  overflow,\n  styles,\n  onLoad,\n  onMouseOver,\n  onMouseOut,\n  scrolling,\n  id,\n  frameBorder,\n  ariaHidden,\n  sandbox,\n  allow,\n  className,\n  title,\n  ariaLabel,\n  ariaLabelledby,\n  name,\n  target,\n  loading,\n  importance,\n  referrerpolicy,\n  allowpaymentrequest,\n  src,\n  key\n}) => {\n  const defaultProps = objectAssign({\n    src: src || url,\n    target: target || null,\n    style: {\n      position: position || null,\n      display: display || \"initial\",\n      overflow: overflow || null\n    },\n    scrolling: scrolling || null,\n    allowpaymentrequest: allowpaymentrequest || null,\n    importance: importance || null,\n    sandbox: sandbox && [...sandbox].join(\" \") || null,\n    loading: loading || null,\n    styles: styles || null,\n    name: name || null,\n    className: className || null,\n    allowFullScreen: \"allowFullScreen\" || null,\n    referrerpolicy: referrerpolicy || null,\n    title: title || null,\n    allow: allow || null,\n    id: id || null,\n    \"aria-labelledby\": ariaLabelledby || null,\n    \"aria-hidden\": ariaHidden || null,\n    \"aria-label\": ariaLabel || null,\n    width: width || null,\n    height: height || null,\n    onLoad: onLoad || null,\n    onMouseOver: onMouseOver || null,\n    onMouseOut: onMouseOut || null,\n    key: key || \"iframe\"\n  });\n  let props = Object.create(null);\n  for (let prop of Object.keys(defaultProps)) {\n    if (defaultProps[prop] != null) {\n      props[prop] = defaultProps[prop];\n    }\n  }\n  for (let i of Object.keys(props.style)) {\n    if (props.style[i] == null) {\n      delete props.style[i];\n    }\n  }\n  if (props.styles) {\n    for (let key of Object.keys(props.styles)) {\n      if (props.styles.hasOwnProperty(key)) {\n        props.style[key] = props.styles[key];\n      }\n      if (Object.keys(props.styles).pop() == key) {\n        delete props.styles;\n      }\n    }\n  }\n  if (allowFullScreen) {\n    if (\"allow\" in props) {\n      const currentAllow = props.allow.replace(\"fullscreen\", \"\");\n      props.allow = `fullscreen ${currentAllow.trim()}`.trim();\n    } else {\n      props.allow = \"fullscreen\";\n    }\n  }\n  if (frameBorder >= 0) {\n    if (!props.style.hasOwnProperty(\"border\")) {\n      props.style.border = frameBorder;\n    }\n  }\n  return React.createElement(\"iframe\", Object.assign({}, props));\n};\nexport default Iframe;","map":null,"metadata":{},"sourceType":"module"}